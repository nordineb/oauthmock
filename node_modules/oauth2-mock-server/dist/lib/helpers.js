"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readJsonFromFile = exports.shift = exports.assertIsValidTokenRequest = exports.assertIsPlainObject = exports.assertIsAddressInfo = exports.assertIsString = exports.defaultTokenTtl = void 0;
const assert_1 = require("assert");
const fs_1 = require("fs");
const lodash_isplainobject_1 = __importDefault(require("lodash.isplainobject"));
exports.defaultTokenTtl = 3600;
function assertIsString(input, errorMessage) {
    if (typeof input !== 'string') {
        throw new assert_1.AssertionError({ message: errorMessage });
    }
}
exports.assertIsString = assertIsString;
function assertIsAddressInfo(input) {
    if (input === null || typeof input === 'string') {
        throw new assert_1.AssertionError({ message: 'Unexpected address type' });
    }
}
exports.assertIsAddressInfo = assertIsAddressInfo;
function assertIsPlainObject(obj, errMessage) {
    if (!(0, lodash_isplainobject_1.default)(obj)) {
        throw new assert_1.AssertionError({ message: errMessage });
    }
}
exports.assertIsPlainObject = assertIsPlainObject;
function assertIsValidTokenRequest(body) {
    assertIsPlainObject(body, 'Invalid token request body');
    if ('scope' in body) {
        assertIsString(body.scope, "Invalid 'scope' type");
    }
    assertIsString(body.grant_type, "Invalid 'grant_type' type");
    if ('code' in body) {
        assertIsString(body.code, "Invalid 'code' type");
    }
}
exports.assertIsValidTokenRequest = assertIsValidTokenRequest;
function shift(arr) {
    if (arr.length === 0) {
        throw new assert_1.AssertionError({ message: 'Empty array' });
    }
    const val = arr.shift();
    if (val === undefined) {
        throw new assert_1.AssertionError({ message: 'Empty value' });
    }
    return val;
}
exports.shift = shift;
const readJsonFromFile = (filepath) => {
    const content = (0, fs_1.readFileSync)(filepath, 'utf8');
    const maybeJson = JSON.parse(content);
    assertIsPlainObject(maybeJson, `File "${filepath}" doesn't contain a properly JSON serialized object.`);
    return maybeJson;
};
exports.readJsonFromFile = readJsonFromFile;
